viewLifecycleOwner.lifecycleScope.launchWhenStarted {
            vm.incomingMessage.collectLatest { message ->
                Log.d(TAG, "onNewMessage: $message")
                when (message.type) {
                    "call_response" -> {
                        if (message.data == "user is not online") {
                            Toast.makeText(
                                requireContext(),
                                "user is not online",
                                Toast.LENGTH_LONG
                            ).show()
                        } else {
                            //====================LAYOUT CONFIG====================
                                vm.updateIsOngoingCall(true)
                            //====================LAYOUT CONFIG END====================

                                binding.apply {
                                    rtcClient?.initializeSurfaceView(localView)
                                    rtcClient?.initializeSurfaceView(remoteView)
                                    rtcClient?.startLocalVideo(localView)
                                    rtcClient?.call(
                                        targetUserNameEt.text.toString(),
                                        vm.username!!,
                                        vm.socketRepo
                                    )
                                }
                        }
                    }
                    "offer_received" -> {

                        //====================LAYOUT CONFIG====================
                            vm.updateIsIncomingCall(true)
                        //====================LAYOUT CONFIG END====================

                        binding.apply {
                            incomingNameTV.text = "${message.name.toString()} is calling you"
                            acceptButton.setOnClickListener {

                                //====================LAYOUT CONFIG====================
                                setIncomingCallLayoutGone() // todo handle through state
                                setCallLayoutVisible() // todo handle through state
                                setWhoToCallLayoutGone() // todo handle through state
                                vm.updateIsIncomingCall(false)
                                vm.updateIsOngoingCall(true)
                                //====================LAYOUT CONFIG END====================

                                rtcClient?.initializeSurfaceView(localView)
                                rtcClient?.initializeSurfaceView(remoteView)
                                rtcClient?.startLocalVideo(localView)
                                val remoteSession = SessionDescription(
                                    SessionDescription.Type.OFFER,
                                    message.data.toString()
                                )
                                rtcClient?.onRemoteSessionReceived(remoteSession)
                                rtcClient?.answer(message.name!!, vm.username!!, vm.socketRepo)
                                vm.updateTargetName(message.name!!)
                            }
                            rejectButton.setOnClickListener {

                                //====================LAYOUT CONFIG====================
                                setIncomingCallLayoutGone() // todo handle through state
                                vm.updateIsIncomingCall(false)
                                //====================LAYOUT CONFIG END====================

                            }
                            remoteViewLoading.visibility = View.GONE
                        }
                    }
                    "answer_received" -> {
                        val session = SessionDescription(
                            SessionDescription.Type.ANSWER,
                            message.data.toString()
                        )
                        rtcClient?.onRemoteSessionReceived(session)
                        binding.remoteViewLoading.visibility = View.GONE
                    }
                    "ice_candidate" -> {
                        // RECEIVING ICE CANDIDATE:
                        try {
                            val receivedIceCandidate = gson.fromJson(
                                gson.toJson(message.data),
                                IceCandidateModel::class.java
                            )
                            rtcClient?.addIceCandidate(
                                IceCandidate(
                                    receivedIceCandidate.sdpMid,
                                    Math.toIntExact(receivedIceCandidate.sdpMLineIndex.toLong()),
                                    receivedIceCandidate.sdpCandidate
                                )
                            )
                        } catch (e: Exception) {
                            e.printStackTrace()
                        }
                    }
                }
            }
        }